外观模式
===

## 1. 什么是外观模式

外观模式（Facade Pattern）：为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。

## 2. 外观模式的结构

外观模式包含如下角色：

* Facade: 外观角色
* SubSystem:子系统角色

## 3. 外观模式的应用

### 3.1 外观模式的优点

* 它对客户屏蔽了子系统组件，因而减少了客户处理的对象数目并使得子系统使用起来更加方便。
* 它实现了子系统与客户之间的松耦合关系，而子系统内部的功能组件往往是紧耦合关系，松耦合关系使得子系统的组件变化不会影响到它的客户。
* 通过引入外观模式，客户代码将变得很简单，与之关联的对象也很少。

### 3.2 外观模式的缺点

* 不能很好地限制客户使用子系统类。
* 增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”。


## 4. 何时使用外观模式

* 当要为一个复杂子系统提供一个简单接口时可以使用外观模式。该接口可以满足大多数用户的需求，而且用户也可以越过外观类直接访问子系统。
* 客户程序与多个子系统之间存在很大的依赖性。引入外观类将子系统与客户以及其他子系统解耦，可以提高子系统的独立性和可移植性。
* 在层次化结构中，可以使用外观模式定义系统中每一层的入口。